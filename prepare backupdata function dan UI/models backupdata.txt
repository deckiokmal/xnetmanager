# -----------------------------------------------------------------------
# Backup Management Section
# -----------------------------------------------------------------------


class BackupData(db.Model):
    __tablename__ = "backup_data"

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    backup_name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.String(255), nullable=True)
    version = db.Column(db.Integer, nullable=False, default=1)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(
        db.String(36), db.ForeignKey("users.id"), nullable=False, index=True
    )

    user = db.relationship(
        "User", back_populates="backups", overlaps="shared_backups,backup_shares"
    )

    # Hubungan ke model GitBackupVersion
    git_versions = db.relationship(
        "GitBackupVersion",
        back_populates="backup",
        lazy="dynamic",
        cascade="all, delete-orphan",
    )

    def __repr__(self):
        return f"<BackupData {self.backup_name} v{self.version}>"

    @staticmethod
    def create_backup(backup_name, description, user_id, commit_hash=None):
        try:
            last_backup = (
                BackupData.query.filter_by(backup_name=backup_name, user_id=user_id)
                .order_by(BackupData.version.desc())
                .first()
            )
            new_version = last_backup.version + 1 if last_backup else 1

            new_backup = BackupData(
                backup_name=backup_name,
                description=description,
                version=new_version,
                user_id=user_id,
            )
            db.session.add(new_backup)
            db.session.commit()

            # Log the successful creation of a backup
            current_app.logger.info(
                f"Backup {new_backup.backup_name} v{new_backup.version} created successfully."
            )

            # Jika ada hash commit, buat GitBackupVersion baru
            # Path ke repositori Git untuk backup
            BACKUP_FOLDER = "xmanager/backups"
            REPO_PATH = os.path.join(current_app.static_folder, BACKUP_FOLDER)
            if commit_hash:
                commit_message = (
                    f"Backup {backup_name} version {new_version} for user {user_id}"
                )
                git_version = GitBackupVersion(
                    backup_id=new_backup.id,
                    commit_hash=commit_hash,
                    commit_message=commit_message,
                    file_path=os.path.join(REPO_PATH, backup_name),
                )
                db.session.add(git_version)
                db.session.commit()
                current_app.logger.info(
                    f"Git version for backup {backup_name} v{new_version} created with commit {commit_hash}."
                )

            return new_backup
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(
                f"Error creating backup {backup_name} for user {user_id}: {e}"
            )
            return None


class UserBackupShare(db.Model):
    __tablename__ = "user_backup_share"

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = db.Column(
        db.String(36), db.ForeignKey("users.id"), nullable=False, index=True
    )
    backup_id = db.Column(
        db.String(36), db.ForeignKey("backup_data.id"), nullable=False, index=True
    )

    user = db.relationship(
        "User",
        back_populates="backup_shares",
        overlaps="backup_shares,shared_user",
    )
    backup = db.relationship(
        "BackupData",
        backref=db.backref("shared_with", lazy=True),
        overlaps="shared_backups",
    )

    def __repr__(self):
        return f"<UserBackupShare User {self.user_id} -> Backup {self.backup_id}>"


class GitBackupVersion(db.Model):
    __tablename__ = "git_backup_version"

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    backup_id = db.Column(
        db.String(36), db.ForeignKey("backup_data.id"), nullable=False, index=True
    )
    commit_hash = db.Column(db.String(40), nullable=False)  # Hash dari commit Git
    commit_message = db.Column(db.String(255), nullable=False)
    committed_at = db.Column(db.DateTime, default=datetime.utcnow)
    file_path = db.Column(db.String(255), nullable=False)

    # Relasi ke BackupData
    backup = db.relationship(
        "BackupData", backref=db.backref("git_versions", lazy=True)
    )

    def __repr__(self):
        return f"<GitBackupVersion {self.commit_hash} for Backup {self.backup_id}>"
