1. Login Endpoint
Endpoint: /api/login
Method: POST
Description: Mengotentikasi pengguna dan menghasilkan token JWT untuk mengakses endpoint yang dilindungi.
Payload:
json
Copy code
{
  "email": "user@example.com",
  "password": "userpassword"
}
Response:
json
Copy code
{
  "message": "Login Sukses.",
  "access_token": "jwt_access_token_here"
}
Note: Simpan access_token untuk digunakan pada permintaan berikutnya di header Authorization sebagai Bearer <token>.
2. Get Users Endpoint
Endpoint: /api/get-users
Method: GET
Description: Mengambil daftar pengguna yang terdaftar.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
[
  {
    "id": "user_id",
    "email": "user@example.com",
    "first_name": "John",
    "last_name": "Doe"
  },
  ...
]
3. Get User by ID
Endpoint: /api/get-user/<user_id>
Method: GET
Description: Mengambil detail pengguna berdasarkan user_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "id": "user_id",
  "email": "user@example.com",
  "first_name": "John",
  "last_name": "Doe"
}
4. Create User
Endpoint: /api/create-user
Method: POST
Description: Membuat pengguna baru.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "email": "newuser@example.com",
  "first_name": "New",
  "last_name": "User",
  "password": "newpassword"
}
Response:
json
Copy code
{
  "message": "User berhasil dibuat."
}
5. Update User
Endpoint: /api/update-user
Method: PUT
Description: Memperbarui informasi pengguna.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "user_id": "user_id_here",
  "first_name": "Updated",
  "last_name": "Name"
}
Response:
json
Copy code
{
  "message": "User update sukses."
}
6. Delete User
Endpoint: /api/delete-user/<user_id>
Method: DELETE
Description: Menghapus pengguna berdasarkan user_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "message": "User berhasil dihapus."
}
7. Get Devices
Endpoint: /api/get-devices
Method: GET
Description: Mengambil daftar perangkat yang tersedia.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
[
  {
    "id": "device_id",
    "device_name": "Device1",
    "ip_address": "192.168.1.1",
    "vendor": "Cisco",
    "username": "admin"
  },
  ...
]
8. Get Device by ID
Endpoint: /api/get-device/<device_id>
Method: GET
Description: Mendapatkan detail perangkat berdasarkan device_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "id": "device_id",
  "device_name": "Device1",
  "ip_address": "192.168.1.1",
  "vendor": "Cisco",
  "username": "admin"
}
9. Create Device
Endpoint: /api/create-device
Method: POST
Description: Menambahkan perangkat baru.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "ip_address": "192.168.1.1",
  "device_name": "Device1",
  "vendor": "Cisco",
  "username": "admin",
  "password": "password",
  "ssh": 22,
  "description": "Core router"
}
Response:
json
Copy code
{
  "message": "Device berhasil dibuat."
}
10. Update Device
Endpoint: /api/update-device
Method: PUT
Description: Memperbarui informasi perangkat.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "device_id": "device_id",
  "device_name": "UpdatedDeviceName",
  "vendor": "Cisco",
  "ip_address": "192.168.1.10",
  "username": "admin",
  "password": "newpassword",
  "ssh": 22,
  "description": "Updated description"
}
Response:
json
Copy code
{
  "message": "Device update sukses."
}
11. Delete Device
Endpoint: /api/delete-device/<device_id>
Method: DELETE
Description: Menghapus perangkat berdasarkan device_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "message": "Device berhasil dihapus."
}
12. Push Config to Devices
Endpoint: /api/push_configs
Method: POST
Description: Mengirim konfigurasi ke beberapa perangkat sekaligus.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "devices": ["192.168.1.1", "192.168.1.2"],
  "config_id": "config_id_here"
}
Response:
json
Copy code
{
  "success": true,
  "results": [
    {
      "device_name": "Device1",
      "ip": "192.168.1.1",
      "status": "success",
      "message": "Konfigurasi sukses"
    },
    ...
  ]
}
13. Check Device Status
Endpoint: /api/check_status
Method: POST
Description: Memeriksa status perangkat, menggunakan cache untuk meningkatkan kecepatan.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "page": 1,
  "per_page": 10,
  "search_query": "router"
}
Response:
json
Copy code
{
  "success": true,
  "data": {
    "device_id_1": "online",
    "device_id_2": "offline",
    ...
  }
}

14. Get Templates
Endpoint: /api/get-templates
Method: GET
Description: Mengambil daftar template konfigurasi yang tersedia.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
[
  {
    "id": "template_id",
    "template_name": "Template1",
    "vendor": "Cisco",
    "version": "1.0",
    "description": "Router configuration template"
  },
  ...
]
15. Get Template by ID
Endpoint: /api/get-template/<template_id>
Method: GET
Description: Mendapatkan detail template berdasarkan template_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "id": "template_id",
  "template_name": "Template1",
  "vendor": "Cisco",
  "version": "1.0",
  "description": "Router configuration template",
  "template_content": "template content here",
  "parameter_content": "parameter content here"
}
16. Create Template
Endpoint: /api/create-template
Method: POST
Description: Membuat template baru untuk konfigurasi perangkat.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "vendor": "Cisco",
  "version": "1.0",
  "description": "Template for router configuration",
  "template_content": "template content",
  "parameter_content": "parameter content"
}
Response:
json
Copy code
{
  "message": "Template berhasil dibuat.",
  "template_id": "template_id_here"
}
17. Update Template
Endpoint: /api/update-template/<template_id>
Method: PUT
Description: Memperbarui template konfigurasi.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "template_name": "UpdatedTemplateName",
  "vendor": "Cisco",
  "version": "1.1",
  "description": "Updated description",
  "template_content": "updated template content",
  "parameter_content": "updated parameter content"
}
Response:
json
Copy code
{
  "message": "Template berhasil diperbarui."
}
18. Delete Template
Endpoint: /api/delete-template/<template_id>
Method: DELETE
Description: Menghapus template berdasarkan template_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "message": "Template berhasil dihapus."
}
19. Generate Template Configuration
Endpoint: /api/generate-template/<template_id>
Method: POST
Description: Menghasilkan konfigurasi dari template yang ada.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
{
  "is_valid": true,
  "message": "Template berhasil digenerate."
}
20. Get Configuration Files
Endpoint: /api/get-configfiles
Method: GET
Description: Mengambil daftar file konfigurasi yang telah disimpan.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Response:
json
Copy code
[
  {
    "id": "config_id",
    "config_name": "Config1",
    "vendor": "Cisco",
    "description": "Initial configuration",
    ...
  },
  ...
]
21. Create Configuration Manually
Endpoint: /api/create-manual-configfile
Method: POST
Description: Membuat file konfigurasi secara manual.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "config_name": "ManualConfig1",
  "vendor": "Cisco",
  "description": "Manual configuration",
  "config_content": "configuration content here"
}
Response:
json
Copy code
{
  "message": "Config berhasil dibuat.",
  "config_id": "config_id_here"
}
22. Create Configuration with TALITA Automation
Endpoint: /api/create-automate-configfile-talita
Method: POST
Description: Menggunakan TALITA untuk membuat konfigurasi otomatis berdasarkan vendor dan pertanyaan pengguna.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "config_name": "AutoConfig1",
  "vendor": "Cisco",
  "description": "Automated configuration with TALITA",
  "ask_configuration": "Configuration request details here"
}
Response:
json
Copy code
{
  "is_valid": true,
  "message": "Konfigurasi berhasil dibuat dengan AI",
  "config_id": "config_id_here",
  "configuration_content": "Generated configuration content"
}
23. Create Multiple Backups
Endpoint: /api/create_backup_multiple
Method: POST
Description: Membuat backup untuk beberapa perangkat secara paralel.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "devices": ["192.168.1.1", "192.168.1.2"],
  "backup_name": "BackupName",
  "description": "Multiple device backup",
  "backup_type": "full",
  "retention_days": 30,
  "command": "backup command here"
}
Response:
json
Copy code
{
  "success": true,
  "results": [
    {
      "device_name": "Device1",
      "ip": "192.168.1.1",
      "status": "success",
      "message": "Backup successful",
      "backup_id": "backup_id_here"
    },
    ...
  ]
}
24. Create Single Device Backup
Endpoint: /api/create_backup_single/<device_id>
Method: POST
Description: Membuat backup untuk satu perangkat berdasarkan device_id.
Headers:
json
Copy code
{
  "Authorization": "Bearer jwt_access_token_here"
}
Payload:
json
Copy code
{
  "backup_name": "BackupName",
  "description": "Single device backup",
  "backup_type": "incremental",
  "retention_days": 30,
  "command": "backup command here"
}
Response:
json
Copy code
{
  "success": true,
  "message": "Backup created successfully.",
  "backup_id": "backup_id_here",
  "backup_path": "backup/file/path/here"
}
Catatan Tambahan:
Token JWT: Semua permintaan ke endpoint di atas (kecuali login) harus menyertakan token JWT di header Authorization: Bearer <jwt_access_token_here>.
Format Data: Endpoint mendukung format JSON untuk permintaan dan respons.